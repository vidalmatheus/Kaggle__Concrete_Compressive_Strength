last.char <- substr(tmp,nchar(tmp),nchar(tmp))
if (!last.char%in%sigma[5:length(sigma)] || is.na(tmp)){ # se terminar em operador
tmp <- substr(tmp,1,nchar(tmp)-1)
}
derivacao[i] <- tmp
S <- "<NA>"
}
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- stringr::str_match(derivacao[i], "<(.*?)>") # acha o primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- stringr::str_match(derivacao[i], "<(.*?)>") # acha o primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- stringr::str_match(derivacao[i], "<(.*?)>") # acha o primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
}
}
## Avaliação dos Cromossomos
training.model <- trainingData[,c("strength")]
erroQuadraticoMedio <- rep(0,cromo_quant)
for (k in 1:cromo_quant){
training.data <- c()
for (i in 1:length(training.model)){
x <- trainingData[i,2]
y <- trainingData[i,3]
z <- trainingData[i,4]
u <- trainingData[i,5]
v <- trainingData[i,6]
w <- trainingData[i,7]
p <- trainingData[i,8]
q <- trainingData[i,9]
training.data <- c(training.data,eval(parse(text=derivacao[k])))
}
erroQuadraticoMedio[k] <- mean((training.data - (training.model))^2)
}
erroQuadraticoMedio
## Torneio de Cromossomos
sorteados <- c()
for (i in 1:cromo_quant){
sorteio <- rep(NA,cromo_quant)
pos <- sample(cromo_quant,2) # sorteio dois crommossomos
sorteio[pos] <- pos
sorteados <- c(sorteados,which.min(erroQuadraticoMedio[sorteio]))
}
sorteados
## Cruzamento de Cromossomos
p.cruzamento <- 0.8
i <- 1
while (i < length(sorteados)){
# avalia a possibilidade de cruzamento de cada par
vai.cruzar <- runif(1)
if (vai.cruzar<=p.cruzamento){ # realiza cruzamento
pto.cruza <- sample(cromo_size-1,1)
index_pai <- sorteados[i]
index_mae <- sorteados[i+1]
tmp <- C[index_pai,(pto.cruza+1):cromo_size]
C[index_pai,(pto.cruza+1):cromo_size] <- C[index_mae,(pto.cruza+1):cromo_size]
C[index_mae,(pto.cruza+1):cromo_size] <- tmp
}
i <- i+2 # pula o próximo cromossomo (estamos olhando os pares)
}
## Mutação
p.mutacao <- 0.1
vai.mutar <- runif(cromo_size*cromo_quant)
for (i in 1:length(vai.mutar)){
if (vai.mutar[i]<p.mutacao){
linha <- i%%cromo_quant+1
coluna <- (i-cromo_size*(i%%cromo_quant))%%cromo_size
C[linha,coluna] <- sample(max_gene,1)
}
}
}
g
sample.data <- read.csv(file="sample.csv", header=TRUE, sep=",")
write.csv(predict.data,file = "predicted.csv",col.names = "ID","strength")
predict.data
# Limpa área de trabalho
rm(list = ls())
# Não Terminais
V <- c("<exp>","<op>","<var>")
# Terminais
sigma <- c("+","-","/","*","x","y","z","u","v","w","p","q")
#sigma <- c("+","-","/","*","x","y")
# Símbolo Inicial
S <- "<exp>"
# Produções
P <- list(c("<exp><op><exp>","<var>"),c("+","-","/","*"),c("x","y","z","u","v","w","p","q"))
cromo_size <- 6
cromo_quant <- 4
max_gene <- 100
C <- matrix(sample(max_gene,cromo_size),cromo_quant,cromo_size) # Ci = C[i,]
trainingData <- read.csv(file="training.csv", header=TRUE, sep=",")
N <- 100 # número de gerações
for (g in 1:N){
## Gerando Derivação
S <- "<exp>"
derivacao <- rep(S,cromo_quant) # símbolo inicial
for (i in 1:cromo_quant) {
S <- "<exp>"
j <- 0
count <- 0
while (S!="<NA>"){
count <- count + 1
# evitar loop infinito, para cromossomos mal escolhidos:
if (count > 100){
tmp <- stringr::str_match(derivacao[i], ".*?<")
tmp <- substr(tmp,1,nchar(tmp)-1)
last.char <- substr(tmp,nchar(tmp),nchar(tmp))
if (!last.char%in%sigma[5:length(sigma)] || is.na(tmp)){ # se terminar em operador
tmp <- substr(tmp,1,nchar(tmp)-1)
}
derivacao[i] <- tmp
S <- "<NA>"
}
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- stringr::str_match(derivacao[i], "<(.*?)>") # acha o primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- stringr::str_match(derivacao[i], "<(.*?)>") # acha o primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- stringr::str_match(derivacao[i], "<(.*?)>") # acha o primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
}
}
## Avaliação dos Cromossomos
training.model <- trainingData[,c("strength")]
erroQuadraticoMedio <- rep(0,cromo_quant)
for (k in 1:cromo_quant){
training.data <- c()
for (i in 1:length(training.model)){
x <- trainingData[i,2]
y <- trainingData[i,3]
z <- trainingData[i,4]
u <- trainingData[i,5]
v <- trainingData[i,6]
w <- trainingData[i,7]
p <- trainingData[i,8]
q <- trainingData[i,9]
training.data <- c(training.data,eval(parse(text=derivacao[k])))
}
erroQuadraticoMedio[k] <- mean((training.data - (training.model))^2)
}
erroQuadraticoMedio
## Torneio de Cromossomos
sorteados <- c()
for (i in 1:cromo_quant){
sorteio <- rep(NA,cromo_quant)
pos <- sample(cromo_quant,2) # sorteio dois crommossomos
sorteio[pos] <- pos
sorteados <- c(sorteados,which.min(erroQuadraticoMedio[sorteio]))
}
sorteados
## Cruzamento de Cromossomos
p.cruzamento <- 0.8
i <- 1
while (i < length(sorteados)){
# avalia a possibilidade de cruzamento de cada par
vai.cruzar <- runif(1)
if (vai.cruzar<=p.cruzamento){ # realiza cruzamento
pto.cruza <- sample(cromo_size-1,1)
index_pai <- sorteados[i]
index_mae <- sorteados[i+1]
tmp <- C[index_pai,(pto.cruza+1):cromo_size]
C[index_pai,(pto.cruza+1):cromo_size] <- C[index_mae,(pto.cruza+1):cromo_size]
C[index_mae,(pto.cruza+1):cromo_size] <- tmp
}
i <- i+2 # pula o próximo cromossomo (estamos olhando os pares)
}
## Mutação
p.mutacao <- 0.1
vai.mutar <- runif(cromo_size*cromo_quant)
for (i in 1:length(vai.mutar)){
if (vai.mutar[i]<p.mutacao){
linha <- i%%cromo_quant+1
coluna <- (i-cromo_size*(i%%cromo_quant))%%cromo_size
C[linha,coluna] <- sample(max_gene,1)
}
}
}
training.model <- trainingData[,c("strength")]
erroQuadraticoMedio <- rep(0,cromo_quant)
for (k in 1:cromo_quant){
training.data <- c()
for (i in 1:length(training.model)){
x <- trainingData[i,2]
y <- trainingData[i,3]
z <- trainingData[i,4]
u <- trainingData[i,5]
v <- trainingData[i,6]
w <- trainingData[i,7]
p <- trainingData[i,8]
q <- trainingData[i,9]
training.data <- c(training.data,eval(parse(text=derivacao[k])))
}
erroQuadraticoMedio[k] <- mean((training.data - (training.model))^2)
}
# Cromossomo vencedor:
vencedor <- which.min(erroQuadraticoMedio)
testingData <- read.csv(file="testing.csv", header=TRUE, sep=",")
predict.data <- c()
for (i in 1:dim(testingData)[1]){
x <- trainingData[i,2]
y <- trainingData[i,3]
z <- trainingData[i,4]
u <- trainingData[i,5]
v <- trainingData[i,6]
w <- trainingData[i,7]
p <- trainingData[i,8]
q <- trainingData[i,9]
predict.data <- c(predict.data,eval(parse(text=derivacao[vencedor])))
}
#plot
plot(predict.data)
# boxplot
boxplot(predict.data)
# Limpa área de trabalho
rm(list = ls())
# Não Terminais
V <- c("<exp>","<op>","<var>")
# Terminais
sigma <- c("+","-","/","*","x","y","z","u","v","w","p","q")
#sigma <- c("+","-","/","*","x","y")
# Símbolo Inicial
S <- "<exp>"
# Produções
P <- list(c("<exp><op><exp>","<var>"),c("+","-","/","*"),c("x","y","z","u","v","w","p","q"))
cromo_size <- 6
cromo_quant <- 4
max_gene <- 100
C <- matrix(sample(max_gene,cromo_size),cromo_quant,cromo_size) # Ci = C[i,]
trainingData <- read.csv(file="training.csv", header=TRUE, sep=",")
# SOMENTE PARA TESTE
#C[1,] <- c(4,15,75,8,41,12)
#C[2,] <- c(6,10,255,7,50,35)
#C[3,] <- c(9,40,7,43,2,11)
#C[4,] <- c(20,5,200,5,67,23)
# FIM
derivacao <- rep(S,cromo_quant) # símbolo inicial
for (i in 1:cromo_quant) {
S <- "<exp>"
j <- 0
count <- 0
while (S!="<NA>"){
count <- count + 1
# evitar loop infinito, para cromossomos mal escolhidos:
if (count > 100){
tmp <- stringr::str_match(derivacao[i], ".*?<")
tmp <- substr(tmp,1,nchar(tmp)-1)
last.char <- substr(tmp,nchar(tmp),nchar(tmp))
if (!last.char%in%sigma[5:length(sigma)] || is.na(tmp)){ # se terminar em operador
tmp <- substr(tmp,1,nchar(tmp)-1)
}
derivacao[i] <- tmp
S <- "<NA>"
}
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- stringr::str_match(derivacao[i], "<(.*?)>") # acha o primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- stringr::str_match(derivacao[i], "<(.*?)>") # acha o primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- stringr::str_match(derivacao[i], "<(.*?)>") # acha o primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
}
}
# Limpa área de trabalho
rm(list = ls())
# Não Terminais
V <- c("<exp>","<op>","<var>")
# Terminais
sigma <- c("+","-","/","*","x","y","z","u","v","w","p","q")
#sigma <- c("+","-","/","*","x","y")
# Símbolo Inicial
S <- "<exp>"
# Produções
P <- list(c("<exp><op><exp>","<var>"),c("+","-","/","*"),c("x","y","z","u","v","w","p","q"))
cromo_size <- 6
cromo_quant <- 4
max_gene <- 100
C <- matrix(sample(max_gene,cromo_size),cromo_quant,cromo_size) # Ci = C[i,]
trainingData <- read.csv(file="training.csv", header=TRUE, sep=",")
N <- 100 # número de gerações
for (g in 1:N){
## Gerando Derivação
S <- "<exp>"
derivacao <- rep(S,cromo_quant) # símbolo inicial
for (i in 1:cromo_quant) {
S <- "<exp>"
j <- 0
count <- 0
while (S!="<NA>"){
count <- count + 1
# evitar loop infinito, para cromossomos mal escolhidos:
if (count > 50){
tmp <- stringr::str_match(derivacao[i], ".*?<")
tmp <- substr(tmp,1,nchar(tmp)-1)
last.char <- substr(tmp,nchar(tmp),nchar(tmp))
if (!last.char%in%sigma[5:length(sigma)] || is.na(tmp)){ # se terminar em operador
tmp <- substr(tmp,1,nchar(tmp)-1)
}
derivacao[i] <- tmp
S <- "<NA>"
}
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- stringr::str_match(derivacao[i], "<(.*?)>") # acha o primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- stringr::str_match(derivacao[i], "<(.*?)>") # acha o primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- stringr::str_match(derivacao[i], "<(.*?)>") # acha o primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
}
}
## Avaliação dos Cromossomos
training.model <- trainingData[,c("strength")]
erroQuadraticoMedio <- rep(0,cromo_quant)
for (k in 1:cromo_quant){
training.data <- c()
for (i in 1:length(training.model)){
x <- trainingData[i,2]
y <- trainingData[i,3]
z <- trainingData[i,4]
u <- trainingData[i,5]
v <- trainingData[i,6]
w <- trainingData[i,7]
p <- trainingData[i,8]
q <- trainingData[i,9]
training.data <- c(training.data,eval(parse(text=derivacao[k])))
}
erroQuadraticoMedio[k] <- mean((training.data - (training.model))^2)
}
erroQuadraticoMedio
## Torneio de Cromossomos
sorteados <- c()
for (i in 1:cromo_quant){
sorteio <- rep(NA,cromo_quant)
pos <- sample(cromo_quant,2) # sorteio dois crommossomos
sorteio[pos] <- pos
sorteados <- c(sorteados,which.min(erroQuadraticoMedio[sorteio]))
}
sorteados
## Cruzamento de Cromossomos
p.cruzamento <- 0.8
i <- 1
while (i < length(sorteados)){
# avalia a possibilidade de cruzamento de cada par
vai.cruzar <- runif(1)
if (vai.cruzar<=p.cruzamento){ # realiza cruzamento
pto.cruza <- sample(cromo_size-1,1)
index_pai <- sorteados[i]
index_mae <- sorteados[i+1]
tmp <- C[index_pai,(pto.cruza+1):cromo_size]
C[index_pai,(pto.cruza+1):cromo_size] <- C[index_mae,(pto.cruza+1):cromo_size]
C[index_mae,(pto.cruza+1):cromo_size] <- tmp
}
i <- i+2 # pula o próximo cromossomo (estamos olhando os pares)
}
## Mutação
p.mutacao <- 0.1
vai.mutar <- runif(cromo_size*cromo_quant)
for (i in 1:length(vai.mutar)){
if (vai.mutar[i]<p.mutacao){
linha <- i%%cromo_quant+1
coluna <- (i-cromo_size*(i%%cromo_quant))%%cromo_size
C[linha,coluna] <- sample(max_gene,1)
}
}
}
training.model <- trainingData[,c("strength")]
erroQuadraticoMedio <- rep(0,cromo_quant)
for (k in 1:cromo_quant){
training.data <- c()
for (i in 1:length(training.model)){
x <- trainingData[i,2]
y <- trainingData[i,3]
z <- trainingData[i,4]
u <- trainingData[i,5]
v <- trainingData[i,6]
w <- trainingData[i,7]
p <- trainingData[i,8]
q <- trainingData[i,9]
training.data <- c(training.data,eval(parse(text=derivacao[k])))
}
erroQuadraticoMedio[k] <- mean((training.data - (training.model))^2)
}
# Cromossomo vencedor:
vencedor <- which.min(erroQuadraticoMedio)
testingData <- read.csv(file="testing.csv", header=TRUE, sep=",")
predict.data <- c()
for (i in 1:dim(testingData)[1]){
x <- trainingData[i,2]
y <- trainingData[i,3]
z <- trainingData[i,4]
u <- trainingData[i,5]
v <- trainingData[i,6]
w <- trainingData[i,7]
p <- trainingData[i,8]
q <- trainingData[i,9]
predict.data <- c(predict.data,eval(parse(text=derivacao[vencedor])))
}
#plot
plot(predict.data)
# boxplot
boxplot(predict.data)
derivacao
write.csv(predict.data,file = "predicted.csv",col.names = "ID","strength")
write.csv(predict.data,file = "predicted.csv",col.names = c("ID","strength"))
write.csv(predict.data,file = "predicted.csv",col.names = c("ID","strength"))
result.data <- read.csv(file="predicted.csv", header=TRUE, sep=",")
write.csv(predict.data,file = "predicted.csv",col.names = c("ID","strength"),sep = ",")
result.data <- read.csv(file="predicted.csv", header=TRUE, sep=",")
write.csv(predict.data,file="predicted.csv",col.names=c("ID","strength"),sep = ",")
ID <- trainingData[,c("ID")]
View(ID)
ID <- testingData[,c("ID")]
View(ID)
write.csv(predict.data,file="predicted.csv",col.names=c(col.names(testingData[,1]),"strength"),sep = ",")
col.names(testingData[,1])
colnames(testingData)
colnames(testingData[,1])
colnames(testingData[,2])
colnames(testingData[1])
write.csv(predict.data,file="predicted.csv",col.names=c(colnames(testingData[1]),"strength"),sep = ",")
result.data <- read.csv(file="predicted.csv", header=TRUE, sep=",")
View(result.data)
write.csv(predict.data,file="predicted.csv",col.names=c(colnames(testingData[1]),"strength"),sep = ",")
write.table(predict.data,file="predicted.csv",col.names=c(colnames(testingData[1]),"strength"),sep = ",")
write.csv2(predict.data,file="predicted.csv",col.names=c(colnames(testingData[1]),"strength"),sep = ",")
write.csv(predict.data,file="predicted.csv",col.names=c(colnames(testingData[1]),"strength"),sep = ",")
write.csv(predict.data,file="predicted.csv",col.names=TRUE,sep = ",")
write.csv2(predict.data,file="predicted.csv",col.names=TRUE,sep = ",")
result.data <- read.csv(file="predicted.csv", header=TRUE, sep=",")
write.csv2(predict.data,file="predicted.csv")
result.data <- read.csv(file="predicted.csv", header=TRUE, sep=",")
(predict.data,file="predicted.csv",col.names = c("A"),sep = ",")
write.csv(predict.data,file="predicted.csv",col.names = c("A"),sep = ",")
write.csv2(predict.data,file="predicted.csv",col.names = c("A"),sep = ",")
write.csv2(predict.data,file="predicted.csv",col.names = c("A"),sep = ",")
write.csv(predict.data,file="predicted.csv",col.names = c("A"),sep = ",")
write.table(predict.data,file="predicted.csv",col.names = c("A"),sep = ",")
result.data <- read.csv(file="predicted.csv", header=TRUE, sep=",")
ID <- trainingData[c(,"ID")]
ID <- trainingData[c("ID")]
result <- c(ID,predict.data)
VIew(result)
result
View(result)
result <- data.frame(ID,predict.data)
ID <- trainingData[c("ID")]
ID
predict.data
ID <- testingData[c("ID")]
result <- data.frame(ID,predict.data)
View(result)
result <- data.frame(ID,predict.data,check.names = TRUE)
View(result)
result <- data.frame(ID,predict.data,check.rows = TRUE,check.names = TRUE)
View(result)
ID <- testingData[c("ID")]
result <- data.frame(ID,predict.data)
colnames(result) <- c("ID", "strength")
write.table(result,file="predicted.csv")
result.data <- read.csv(file="predicted.csv", header=TRUE, sep=",")
View(result.data)
ID <- testingData[c("ID")]
result <- data.frame(ID,predict.data)
colnames(result) <- c("ID", "strength")
write.table(result,file="predicted.csv",sep = ",")
result.data <- read.csv(file="predicted.csv", header=TRUE, sep=",")
View(result.data)
ID <- testingData[c("ID")]
result <- data.frame(ID,predict.data)
colnames(result) <- c("ID", "strength")
write.table(result,file="predicted.csv",col.names = c("ID","strength"),sep = ",")
result.data <- read.csv(file="predicted.csv", header=TRUE, sep=",")
View(result.data)
