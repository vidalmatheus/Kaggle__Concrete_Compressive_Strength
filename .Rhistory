S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
}
}
# Limpa área de trabalho
rm(list = ls())
# Não Terminais
V <- c("<exp>","<op>","<var>")
# Terminais
#sigma <- c("+","-","/","*","x","y","z","u","v","w")
sigma <- c("+","-","/","*","x","y")
# Símbolo Inicial
S <- "<exp>"
# Produções
P <- list(c("<exp><op><exp>","<var>"),c("+","-","/","*"),c("x","y"))
cromo_size <- 6
cromo_quant <- 4
max_gene <- 100
C <- matrix(sample(max_gene,cromo_size),cromo_quant,cromo_size) # Ci = C[i,]
trainingData <- read.csv(file="training.csv", header=TRUE, sep=",")
C[1,] <- c(4,15,75,8,41,12)
C[2,] <- c(6,10,255,7,50,35)
C[3,] <- c(9,40,7,43,2,11)
C[4,] <- c(20,5,200,5,67,23)
derivacao <- rep(S,cromo_quant) # símbolo inicial
for (i in 1:cromo_quant) {
j <- 0
while (S!="<NA>"){
j <- (j+1)%%cromo_size
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
}
}
# Limpa área de trabalho
rm(list = ls())
# Não Terminais
V <- c("<exp>","<op>","<var>")
# Terminais
#sigma <- c("+","-","/","*","x","y","z","u","v","w")
sigma <- c("+","-","/","*","x","y")
# Símbolo Inicial
S <- "<exp>"
# Produções
P <- list(c("<exp><op><exp>","<var>"),c("+","-","/","*"),c("x","y"))
cromo_size <- 6
cromo_quant <- 4
max_gene <- 100
C <- matrix(sample(max_gene,cromo_size),cromo_quant,cromo_size) # Ci = C[i,]
trainingData <- read.csv(file="training.csv", header=TRUE, sep=",")
C[1,] <- c(4,15,75,8,41,12)
C[2,] <- c(6,10,255,7,50,35)
C[3,] <- c(9,40,7,43,2,11)
C[4,] <- c(20,5,200,5,67,23)
derivacao <- rep(S,cromo_quant) # símbolo inicial
for (i in 1:cromo_quant) {
j <- 0
while (S!="<NA>"){
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
}
}
derivacao
# Limpa área de trabalho
rm(list = ls())
# Não Terminais
V <- c("<exp>","<op>","<var>")
# Terminais
#sigma <- c("+","-","/","*","x","y","z","u","v","w")
sigma <- c("+","-","/","*","x","y")
# Símbolo Inicial
S <- "<exp>"
# Produções
P <- list(c("<exp><op><exp>","<var>"),c("+","-","/","*"),c("x","y"))
cromo_size <- 6
cromo_quant <- 4
max_gene <- 100
C <- matrix(sample(max_gene,cromo_size),cromo_quant,cromo_size) # Ci = C[i,]
trainingData <- read.csv(file="training.csv", header=TRUE, sep=",")
C[1,] <- c(4,15,75,8,41,12)
C[2,] <- c(6,10,255,7,50,35)
C[3,] <- c(9,40,7,43,2,11)
C[4,] <- c(20,5,200,5,67,23)
derivacao <- rep(S,cromo_quant) # símbolo inicial
i=1
i=2
j <- 0
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
j <- j%%cromo_size + 1
j=4
S!="<NA>"
while (S!="<NA>"){
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
}
# Limpa área de trabalho
rm(list = ls())
# Não Terminais
V <- c("<exp>","<op>","<var>")
# Terminais
#sigma <- c("+","-","/","*","x","y","z","u","v","w")
sigma <- c("+","-","/","*","x","y")
# Símbolo Inicial
S <- "<exp>"
# Produções
P <- list(c("<exp><op><exp>","<var>"),c("+","-","/","*"),c("x","y"))
cromo_size <- 6
cromo_quant <- 4
max_gene <- 100
C <- matrix(sample(max_gene,cromo_size),cromo_quant,cromo_size) # Ci = C[i,]
trainingData <- read.csv(file="training.csv", header=TRUE, sep=",")
C[1,] <- c(4,15,75,8,41,12)
C[2,] <- c(6,10,255,7,50,35)
C[3,] <- c(9,40,7,43,2,11)
C[4,] <- c(20,5,200,5,67,23)
derivacao <- rep(S,cromo_quant) # símbolo inicial
for (i in 1:cromo_quant) {
S <- "<exp>"
j <- 0
while (S!="<NA>"){
j <- j%%cromo_size + 1
if (S=="<exp>"){
rule <- P[[1]][1+C[i,j]%%length(P[[1]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<op>"){
rule <- P[[2]][1+C[i,j]%%length(P[[2]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
} else if (S=="<var>"){
rule <- P[[3]][1+C[i,j]%%length(P[[3]])] # determina a regra a ser aplicada
derivacao[i] <- sub(S, rule, derivacao[i]) # atualiza derivacao por substituição
S <- str_match(derivacao[i], "<(.*?)>") # primeiro <..>
S <- paste("<",S[,2],">",sep = "") # novo símbolo
}
}
}
derivacao
x = 0.9
y = 0.8
eval(parse(text=derivacao[1]))
eval(parse(text=derivacao[2]))
eval(parse(text=derivacao[3]))
eval(parse(text=derivacao[4]))
table <- matrix(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
table <- matrix(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
table <- matrix(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06),5,3)
table <- matrix(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06),5,3)
table <- matrix(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
table <- rbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
table
table <- cbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06),5,3)
?predict
length(training.model)
training.model <- cbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06),5,3)
length(training.model)
dim(training.model)
dim(training.model)[2]
training.model
training.model <- cbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06),5,3)
training.model
training <- cbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06),5,3)
training
training <- rbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06),5,3)
training
training.model <- rbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
training.model
training.model <- testData[,3]
testData <- rbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
training.model <- testData[,3]
training.model
dim(training.model)
length(training.model
length(training.model)
length(training.model)
i=1
x <- testData[1,i]
y <- testData[2,i]
testData[2,]
x <- testData[i,1]
y <- testData[i,2]
training.data <- c(eval(parse(text=derivacao[1])))
training.data
for (i in 1:length(training.model)){
x <- testData[i,1]
y <- testData[i,2]
training.data <- c(eval(parse(text=derivacao[1])))
}
training.data
for (i in 1:length(training.model)){
x <- testData[i,1]
y <- testData[i,2]
training.data <- c(training.data,eval(parse(text=derivacao[1])))
}
training.data
testData <- rbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
training.model <- testData[,3]
for (i in 1:length(training.model)){
x <- testData[i,1]
y <- testData[i,2]
training.data <- c(training.data,eval(parse(text=derivacao[1])))
}
training.data
testData <- rbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
training.model <- testData[,3]
training.data <- NA
for (i in 1:length(training.model)){
x <- testData[i,1]
y <- testData[i,2]
training.data <- c(training.data,eval(parse(text=derivacao[1])))
}
testData <- rbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
training.model <- testData[,3]
training.data <- ""
for (i in 1:length(training.model)){
x <- testData[i,1]
y <- testData[i,2]
training.data <- c(training.data,eval(parse(text=derivacao[1])))
}
testData <- rbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
training.model <- testData[,3]
training.data <- c()
for (i in 1:length(training.model)){
x <- testData[i,1]
y <- testData[i,2]
training.data <- c(training.data,eval(parse(text=derivacao[1])))
}
training.data
mean((training.data - predict(training.model))^2)
mean((training.data - (training.model))^2)
MSR.1 <- mean((training.data - (training.model))^2)
MSR.1
erroQuadraticoMedio <- c(0,cromo_quant)
erroQuadraticoMedio <- rep(0,cromo_quant)
testData <- rbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
training.model <- testData[,3]
training.data <- c()
erroQuadraticoMedio <- rep(0,cromo_quant)
for (k in 1:cromo_quant){
for (i in 1:length(training.model)){
x <- testData[i,1]
y <- testData[i,2]
training.data <- c(training.data,eval(parse(text=derivacao[1])))
}
erroQuadraticoMedio[k] <- mean((training.data - (training.model))^2)
}
erroQuadraticoMedio
testData <- rbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
training.model <- testData[,3]
training.data <- c()
erroQuadraticoMedio <- rep(0,cromo_quant)
for (k in 1:cromo_quant){
for (i in 1:length(training.model)){
x <- testData[i,1]
y <- testData[i,2]
training.data <- c(training.data,eval(parse(text=derivacao[k])))
}
erroQuadraticoMedio[k] <- mean((training.data - (training.model))^2)
}
erroQuadraticoMedio
k=2
testData <- rbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
training.model <- testData[,3]
training.data <- c()
erroQuadraticoMedio <- rep(0,cromo_quant)
i=1
x <- testData[i,1]
y <- testData[i,2]
training.data <- c(training.data,eval(parse(text=derivacao[k])))
i=2
x <- testData[i,1]
y <- testData[i,2]
training.data <- c(training.data,eval(parse(text=derivacao[k])))
testData <- rbind(c(0.9,0.8,1.61),c(0.3,0.1,0.19),c(0.5,0.2,0.45),c(0.88,0.5,1.2744),c(0.6,0.7,1.06))
training.model <- testData[,3]
erroQuadraticoMedio <- rep(0,cromo_quant)
for (k in 1:cromo_quant){
training.data <- c()
for (i in 1:length(training.model)){
x <- testData[i,1]
y <- testData[i,2]
training.data <- c(training.data,eval(parse(text=derivacao[k])))
}
erroQuadraticoMedio[k] <- mean((training.data - (training.model))^2)
}
erroQuadraticoMedio
head(trainingData[, c("ID","strength")])
x<-head(trainingData[, c("ID","strength")])
x[1]
x<-head(trainingData[, c("strength")])
x
x<-trainingData[, c("strength")]
x
View(X)
View(x)
training.model <- trainingData[,c("strength")]
View(trainingData)
View(training.model)
